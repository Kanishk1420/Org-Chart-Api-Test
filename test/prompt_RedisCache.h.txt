Please generate a unit test for the following C++ code using the Drogon testing framework.

Configuration:
test_generation:
  framework: drogon
  test_location: "./test"
  test_naming_convention: "test_{controller}_{action}.cc"
  coverage:
    - controllers
    - models
    - services
  assertions:
    - response_code
    - response_body
    - error_handling
  test_cases:
    - positive_cases: true
    - negative_cases: true
    - edge_cases: true
  generate_mocks: true

Source code to test:
#pragma once
#include <drogon/utils/coroutine.h>
#include <drogon/nosql/RedisClient.h>

template <typename T>
T fromString(const std::string &);

template <typename T>
std::string toString(const T &);

template <typename T>
drogon::Task<T> getFromCache(
    const std::string &key,
    const drogon::nosql::RedisClientPtr &client) noexcept(false)
{
    auto value = co_await client->execCommandCoro("get %s", key.data());
    co_return fromString<T>(value.asString());
}

template <typename T>
drogon::Task<> updateCache(
    const std::string &key,
    T &&value,
    const drogon::nosql::RedisClientPtr &client) noexcept(false)
{
    std::string vstr = toString(std::forward<T>(value));
    co_await client->execCommandCoro("set %s %s", key.data(), vstr.data());
}


Generate comprehensive unit tests that cover positive cases, negative cases, and edge cases.