Please generate a unit test for the following C++ code using the Drogon testing framework.

Configuration:
test_generation:
  framework: drogon
  test_location: "./test"
  test_naming_convention: "test_{controller}_{action}.cc"
  coverage:
    - controllers
    - models
    - services
  assertions:
    - response_code
    - response_body
    - error_handling
  test_cases:
    - positive_cases: true
    - negative_cases: true
    - edge_cases: true
  generate_mocks: true

Source code to test:
#include <trantor/net/Resolver.h>
#include <iostream>
void dns(const std::shared_ptr<trantor::Resolver> &resolver)
{
    auto now = trantor::Date::now();
    resolver->resolve("www.baidu.com", [now](const trantor::InetAddress &addr) {
        auto interval = trantor::Date::now().microSecondsSinceEpoch() -
                        now.microSecondsSinceEpoch();
        std::cout << "baidu:" << addr.toIp() << " " << interval / 1000 << "ms"
                  << std::endl;
    });
    resolver->resolve("www.google.com",
                      [now](const trantor::InetAddress &addr) {
                          auto interval =
                              trantor::Date::now().microSecondsSinceEpoch() -
                              now.microSecondsSinceEpoch();
                          std::cout << "google:" << addr.toIp() << " "
                                    << interval / 1000 << "ms" << std::endl;
                      });
    resolver->resolve("www.sina.com", [now](const trantor::InetAddress &addr) {
        auto interval = trantor::Date::now().microSecondsSinceEpoch() -
                        now.microSecondsSinceEpoch();
        std::cout << "sina:" << addr.toIp() << " " << interval / 1000 << "ms"
                  << std::endl;
    });
    resolver->resolve("www.xjfisfjaskfeiakdjfg.com",
                      [now](const trantor::InetAddress &addr) {
                          auto interval =
                              trantor::Date::now().microSecondsSinceEpoch() -
                              now.microSecondsSinceEpoch();
                          std::cout << "bad address:" << addr.toIp() << " "
                                    << interval / 1000 << "ms" << std::endl;
                      });
    resolver->resolve("localhost", [now](const trantor::InetAddress &addr) {
        auto interval = trantor::Date::now().microSecondsSinceEpoch() -
                        now.microSecondsSinceEpoch();
        std::cout << "localhost:" << addr.toIp() << " " << interval / 1000
                  << "ms" << std::endl;
    });
}
int main()
{
    trantor::EventLoop loop;
    auto resolver = trantor::Resolver::newResolver(&loop);
    dns(resolver);
    loop.runAfter(1.0, [resolver]() { dns(resolver); });
    loop.loop();
}


Generate comprehensive unit tests that cover positive cases, negative cases, and edge cases.