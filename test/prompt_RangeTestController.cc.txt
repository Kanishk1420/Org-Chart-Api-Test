Please generate a unit test for the following C++ code using the Drogon testing framework.

Configuration:
test_generation:
  framework: drogon
  test_location: "./test"
  test_naming_convention: "test_{controller}_{action}.cc"
  coverage:
    - controllers
    - models
    - services
  assertions:
    - response_code
    - response_body
    - error_handling
  test_cases:
    - positive_cases: true
    - negative_cases: true
    - edge_cases: true
  generate_mocks: true

Source code to test:
#include "RangeTestController.h"

#include <fstream>

size_t RangeTestController::fileSize_ = 10000 * 100;  // 1e6 Bytes

RangeTestController::RangeTestController()
{
    std::ofstream outfile("./range-test.txt", std::ios::out | std::ios::trunc);
    for (int i = 0; i < 10000; ++i)
    {
        outfile.write(
            "01234567890123456789"
            "01234567890123456789"
            "01234567890123456789"
            "01234567890123456789"
            "01234567890123456789",
            100);
    }
}

void RangeTestController::getFile(
    const HttpRequestPtr &req,
    std::function<void(const HttpResponsePtr &)> &&callback) const
{
    auto resp = HttpResponse::newFileResponse("./range-test.txt");
    callback(resp);
}

void RangeTestController::getFileByRange(
    const HttpRequestPtr &req,
    std::function<void(const HttpResponsePtr &)> &&callback,
    size_t offset,
    size_t length) const
{
    auto resp =
        HttpResponse::newFileResponse("./range-test.txt", offset, length);
    callback(resp);
}


Generate comprehensive unit tests that cover positive cases, negative cases, and edge cases.