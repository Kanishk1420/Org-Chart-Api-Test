Please generate a unit test for the following C++ code using the Drogon testing framework.

Configuration:
test_generation:
  framework: drogon
  test_location: "./test"
  test_naming_convention: "test_{controller}_{action}.cc"
  coverage:
    - controllers
    - models
    - services
  assertions:
    - response_code
    - response_body
    - error_handling
  test_cases:
    - positive_cases: true
    - negative_cases: true
    - edge_cases: true
  generate_mocks: true

Source code to test:
#include <drogon/utils/Utilities.h>
#include <drogon/drogon_test.h>
#include <string>
#include <iostream>
using namespace drogon::utils;
DROGON_TEST(BrotliTest)
{
    SUBSECTION(shortText)
    {
        std::string source{"123中文顶替要枯械"};
        auto compressed = brotliCompress(source.data(), source.length());
        auto decompressed =
            brotliDecompress(compressed.data(), compressed.length());
        CHECK(source == decompressed);
    }

    SUBSECTION(longText)
    {
        std::string source;
        for (size_t i = 0; i < 100000; i++)
        {
            source.append(std::to_string(i));
        }
        auto compressed = brotliCompress(source.data(), source.length());
        auto decompressed =
            brotliDecompress(compressed.data(), compressed.length());
        CHECK(source == decompressed);
    }
}


Generate comprehensive unit tests that cover positive cases, negative cases, and edge cases.