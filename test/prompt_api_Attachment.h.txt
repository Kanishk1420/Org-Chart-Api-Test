Please generate a unit test for the following C++ code using the Drogon testing framework.

Configuration:
test_generation:
  framework: drogon
  test_location: "./test"
  test_naming_convention: "test_{controller}_{action}.cc"
  coverage:
    - controllers
    - models
    - services
  assertions:
    - response_code
    - response_body
    - error_handling
  test_cases:
    - positive_cases: true
    - negative_cases: true
    - edge_cases: true
  generate_mocks: true

Source code to test:
#pragma once
#include <drogon/HttpController.h>
using namespace drogon;
namespace api
{
class Attachment : public drogon::HttpController<Attachment>
{
  public:
    METHOD_LIST_BEGIN
    // use METHOD_ADD to add your custom processing function here;
    METHOD_ADD(Attachment::get, "", Get);  // Path is '/api/attachment'
    METHOD_ADD(Attachment::upload, "/upload", Post);
    METHOD_ADD(Attachment::uploadImage, "/uploadImage", Post);
    METHOD_ADD(Attachment::download, "/download", Get);
    METHOD_LIST_END
    // your declaration of processing function maybe like this:
    void get(const HttpRequestPtr &req,
             std::function<void(const HttpResponsePtr &)> &&callback);
    void upload(const HttpRequestPtr &req,
                std::function<void(const HttpResponsePtr &)> &&callback);
    void uploadImage(const HttpRequestPtr &req,
                     std::function<void(const HttpResponsePtr &)> &&callback);
    void download(const HttpRequestPtr &req,
                  std::function<void(const HttpResponsePtr &)> &&callback);
};
}  // namespace api


Generate comprehensive unit tests that cover positive cases, negative cases, and edge cases.